
.include "pmem_defs.asm"

  /* ---------------- Selftest for the OpenMSP430 ------------------ */
  /* ----- Andrea Floridia (224906), Robert Margelli (224854) ------ */

.global main

main:
        /* ---------------------- INITIALIZE REGISTERS --------------------- */
	MOV     #0x2202, r2
	MOV     #0x3333, r3
	MOV     #0x4444, r4
	MOV     #0x5555, r5
	MOV     #0x6666, r6
	MOV     #0x7777, r7
	MOV     #0x8888, r8
	MOV     #0x9999, r9
	MOV     #0xaaaa, r10
	MOV     #0xbbbb, r11
	MOV     #0xcccc, r12
	MOV     #0xdddd, r13
	MOV     #0xeeee, r14

	MOV     #0x1000, r15

  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*                     MARCH ALGORITHM ON REGISTER FILE                        */
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /* R0 and R1 are excluded. R2 partially tested since it is the CPU status.     */
  /* WORD INSTRUCTIONS ONLY                                                      */

  /*-----------------------------------------------------------------------------*/
  /*                     1ST MARCH ELEMENT                                       */
  /*-----------------------------------------------------------------------------*/
  /* write all 0 in each register (excluded r0 and r1), increasing order.        */
  MOV.W #0x0000, r2
  MOV.W #0x0000, r3
  MOV.W #0x0000, r4
  MOV.W #0x0000, r5
  MOV.W #0x0000, r6
  MOV.W #0x0000, r7
  MOV.W #0x0000, r8
  MOV.W #0x0000, r9
  MOV.W #0x0000, r10
  MOV.W #0x0000, r11
  MOV.W #0x0000, r12
  MOV.W #0x0000, r13
  MOV.W #0x0000, r14
  MOV.W #0x0000, r15


  /*-----------------------------------------------------------------------------*/
  /*                     2ND MARCH ELEMENT                                       */
  /*-----------------------------------------------------------------------------*/
  /* read 0 and write 1 in all registers, starting from r2. NOTE R2 is not       */
  /* written. Increasing order.                                                  */
  MOV.W r2,       0(r1)
  MOV.W r3,       2(r1)
  MOV.W #0xFFFF,  r3
  MOV.W r4,       4(r1)
  MOV.W #0xFFFF,  r4
  MOV.W r5,       6(r1)
  MOV.W #0xFFFF,  r5
  MOV.W r6,       10(r1)
  MOV.W #0xFFFF,  r6
  MOV.W r7,       12(r1)
  MOV.W #0xFFFF,  r7
  MOV.W r8,       14(r1)
  MOV.W #0xFFFF,  r8
  MOV.W r9,       16(r1)
  MOV.W #0xFFFF,  r9
  MOV.W r10,      18(r1)
  MOV.W #0xFFFF,  r10
  MOV.W r11,      20(r1)
  MOV.W #0xFFFF,  r11
  MOV.W r12,      22(r1)
  MOV.W #0xFFFF,  r12
  MOV.W r13,      24(r1)
  MOV.W #0xFFFF,  r13
  MOV.W r14,      26(r1)
  MOV.W #0xFFFF,  r14
  MOV.W r15,      28(r1)
  MOV.W #0xFFFF,  r15


  /*-----------------------------------------------------------------------------*/
  /*                     3RD MARCH ELEMENT                                       */
  /*-----------------------------------------------------------------------------*/
  /* read all 1s, decreasing order                                               */
  MOV.W r15,  30(r1)
  MOV.W r14,  32(r1)
  MOV.W r13,  34(r1)
  MOV.W r12,  36(r1)
  MOV.W r11,  38(r1)
  MOV.W r10,  40(r1)
  MOV.W r9,   42(r1)
  MOV.W r8,   44(r1)
  MOV.W r7,   46(r1)
  MOV.W r6,   48(r1)
  MOV.W r5,   50(r1)
  MOV.W r4,   52(r1)
  MOV.W r3,   54(r1)
  MOV.W r2,   56(r1)


  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*                     MARCH ALGORITHM ON REGISTER FILE                        */
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /* R0 and R1 are excluded. BYTE INSTRUCTIONS ONLY                              */

  /*-----------------------------------------------------------------------------*/
  /*                     1ST MARCH ELEMENT                                       */
  /*-----------------------------------------------------------------------------*/
  /* write all 0 in each register (excluded r0 and r1)                           */
  MOV.B #0x00, r2
  MOV.B #0x00, r3
  MOV.B #0x00, r4
  MOV.B #0x00, r5
  MOV.B #0x00, r6
  MOV.B #0x00, r7
  MOV.B #0x00, r8
  MOV.B #0x00, r9
  MOV.B #0x00, r10
  MOV.B #0x00, r11
  MOV.B #0x00, r12
  MOV.B #0x00, r13
  MOV.B #0x00, r14
  MOV.B #0x00, r15


  /*-----------------------------------------------------------------------------*/
  /*                     2ND MARCH ELEMENT                                       */
  /*-----------------------------------------------------------------------------*/
  /* read 0 and write 1 in all registers starting from r2                        */
  MOV.B r2,     0(r1)
  MOV.B r3,     2(r1)
  MOV.B #0xFF,  r3
  MOV.B r4,     4(r1)
  MOV.B #0xFF,  r4
  MOV.B r5,     6(r1)
  MOV.B #0xFF,  r5
  MOV.B r6,     10(r1)
  MOV.B #0xFF,  r6
  MOV.B r7,     12(r1)
  MOV.B #0xFF,  r7
  MOV.B r8,     14(r1)
  MOV.B #0xFF,  r8
  MOV.B r9,     16(r1)
  MOV.B #0xFF,  r9
  MOV.B r10,    18(r1)
  MOV.B #0xFF,  r10
  MOV.B r11,    20(r1)
  MOV.B #0xFF,  r11
  MOV.B r12,    22(r1)
  MOV.B #0xFF,  r12
  MOV.B r13,    24(r1)
  MOV.B #0xFF,  r13
  MOV.B r14,    26(r1)
  MOV.B #0xFF,  r14
  MOV.B r15,    28(r1)
  MOV.B #0xFF,  r15


  /*-----------------------------------------------------------------------------*/
  /*                     3RD MARCH ELEMENT                                       */
  /*-----------------------------------------------------------------------------*/
  /* read all 1                                                                  */
  MOV.B r15,  30(r1)
  MOV.B r14,  32(r1)
  MOV.B r13,  34(r1)
  MOV.B r12,  36(r1)
  MOV.B r11,  38(r1)
  MOV.B r10,  40(r1)
  MOV.B r9,   42(r1)
  MOV.B r8,   44(r1)
  MOV.B r7,   46(r1)
  MOV.B r6,   48(r1)
  MOV.B r5,   50(r1)
  MOV.B r4,   52(r1)
  MOV.B r3,   54(r1)
  MOV.B r2,   56(r1)

  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*                                 LFSR ROUTINE                                */
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /* Generate two random numbers to test ALU                                     */
  /* variables declaration                                                       */
  MOV.W   #-21279, R4
  MOV.W   R4, R12
  INV.W   R12
  MOV.W   R12, 56(r1)
  MOV.W   R12, R5
  MOV.W   R4, R12
  MOV.W   R12, R6
  MOV.W   R5, R12
  MOV.W   R12, R7
  MOV.W   #0x000A, R15        /* exit loop condition */
  MOV.W   #0x0, R14           /* counter */
  /* end variables declaration                                                   */

  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/

  /*-----------------------------------------------------------------------------*/
  /*                          DO-WHILE LOOP START                                */
  /*-----------------------------------------------------------------------------*/
  .L3:

  /*-----------------------------------------------------------------------------*/
  /*                    GENERATE FIRST OPERAND                                   */
  /*-----------------------------------------------------------------------------*/
  /* C CODE                                                                        */
  /* bit1  = ((lfsr_1 >> 0) ^ (lfsr_1 >> 2) ^ (lfsr_1 >> 3) ^ (lfsr_1 >> 5) ) & 1; */
  /* lfsr_1 =  (lfsr_1 >> 1) | (bit1 << 15);                                       */
  /* From now lfsr_1 = R6                                                          */
  /* bit1 = R8                                                                     */
  /* R12 input operand                                                             */
  /* R11 stores the mask                                                           */
  /* R12 where final output is written                                             */

  MOV.W   R6, R12                 /* move R6 in input register R12 */
  /* shift right by 2 begin */
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  MOV.W #0x3FFF, R11              /* Apply the mask for righ shift by 2 */
  AND.W R11, R12
  MOV.W R12, 56(r1)
  /* shift right end        */

  MOV.W   R6, R13
  MOV.W   R12, R10      /* move the R12 in R10 -> from now R12 can be written again */
  XOR.W   R13, R10
  MOV.W R10, 56(r1)

  /* shift right by 3 begin   */
  MOV.W   R6, R12
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  MOV.W #0x1FFF, R11
  AND.W R11, R12
  MOV.W R12, 56(r1)
  /* shift right by 3 end */

  XOR.W   R12, R10        /* R12 free   */
  MOV.W R10, 56(r1)

  /* shift right by 5 begin   */
  MOV.W   R6, R12
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  MOV.W #0x07FF, R11
  AND.W R11, R12
  MOV.W R12, 56(r1)
  /* shift right by 5 end   */
  XOR.W   R10, R12
  MOV.W R12, 56(r1)
  AND.W   #1, R12
  MOV.W   R12, R8     /* R12 free   */

  /* shift by 1 begin   */
  MOV.W   R6, R12
  RRC R12
  MOV.W R12, 56(r1)
  MOV.W #0x7FFF, R11
  AND.W R11, R12
  MOV.W R12, 56(r1)
  /* shift by 1 end     */

  MOV.W   R12, R13
  MOV.W   R8, R12
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  BIS.W   R13, R12
  MOV.W R12, 56(r1)
  MOV.W   R12, R6

  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/

  /*                  GENERATE 2ND OPERAND                                       */
  /* bit2  = ((lfsr_2 >> 0) ^ (lfsr_2 >> 2) ^ (lfsr_2 >> 3) ^ (lfsr_2 >> 5) ) & 1; */
  /* lfsr_2 =  (lfsr_2 >> 1) | (bit2 << 15);                                       */
  /* lfsr_1 = R7                                                                   */
  /* bit1 = R9                                                                     */
  /* R12 input operand                                                             */
  /* R11 stores the mask                                                           */
  /* R12 where final output is written                                             */

  /* shift right by 2 begin */
  MOV.W   R7, R12
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  MOV.W #0x3FFF, R11
  AND.W R11, R12
  MOV.W R12, 56(r1)
  /* shift by 2 end */

  MOV.W   R7, R13
  MOV.W   R12, R10
  XOR.W   R13, R10
  MOV.W R10, 56(r1)

  /* shift by 3 begin */
  MOV.W   R7, R12
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  MOV.W #0x1FFF, R11
  AND.W R11, R12
  MOV.W R12, 56(r1)
  /* shift by 3 end   */

  XOR.W   R12, R10
  MOV.W R10, 56(r1)

  /* shift by 5 begin   */
  MOV.W   R7, R12
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  RRC R12
  MOV.W R12, 56(r1)
  MOV.W #0x07FF, R11
  AND.W R11, R12
  MOV.W R12, 56(r1)
  /* shift by 5 end   */

  XOR.W   R10, R12
  MOV.W R12, 56(r1)
  AND.W   #1, R12
  MOV.W   R12, R9

  /* shift by 1 begin   */
  MOV.W   R7, R12
  RRC R12
  MOV.W R12, 56(r1)
  MOV.W #0x7FFF, R11
  AND.W R11, R12
  MOV.W R12, 56(r1)
  /* shift by 1 end     */

  MOV.W   R12, R13
  MOV.W   R9, R12
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  ADD.W   R12, R12
  MOV.W R12, 56(r1)
  BIS.W   R13, R12
  MOV.W R12, 56(r1)
  MOV.W   R12, R7

  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*                       FURTHER TEST MEM BACKBONE                             */
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  MOV.W R7, 0(R7)
  MOV.W R6, 0(R6)
  MOV.B R7, 0(R6)
  MOV.B R6, 0(R7)

  PUSH R6
  PUSH R7

  JMP after_L3_1

  /* this label is normally skipped during the normal flow, is used to jump back  */
  /* at the beginning of the loop. JMP instruction allows only jump with offset   */
  /* -511:+512                                                                    */
  L3_1:

  JMP .L3

  after_L3_1:
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*                     PERFORM FURTHER OPERATIONS ON ALU                       */
  /* R6 1st operand. R7 2nd operand                                              */
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/


  /* TEST ADD INSTRUCTION */
  MOV.W R6, R10
  MOV.W R7, R11
  ADD   R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST ADD.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  ADD.B R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST ADDC INSTRUCTION  */
  MOV.W R6, R10
  MOV.W R7, R11
  ADDC  R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)
  ADDC  R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)
  ADDC  R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST ADDC.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  ADDC.B  R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)
  ADDC.B  R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)
  ADDC.B  R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST SUB INSTRUCTION */
  MOV.W R6, R10
  MOV.W R7, R11
  SUB   R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST SUB.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  SUB.B   R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST SUBC INSTRUCTION */
  MOV.W R6, R10
  MOV.W R7, R11
  SUBC  R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)
  SUBC  R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)
  SUBC  R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST SUBC.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  SUBC.B  R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)
  SUBC.B  R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)
  SUBC.B  R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)


  /* TEST CMP INSTRUCTION  */
  MOV.W R6, R10
  MOV.W R7, R11
  CMP   R10, R11
  MOV.W R2, 56(R1)

  /* TEST CMP.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  CMP.B   R10, R11
  MOV.W R2, 56(R1)

  /* TEST DADD INSTRUCTION */
  MOV.W R6, R10
  MOV.W R7, R11
  DADD  R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)
  DADD  R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)
  DADD  R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST DADD.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  DADD.B  R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)
  DADD.B  R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)
  DADD.B  R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST BIT INSTRUCTION */
  MOV.W R6, R10
  MOV.W R7, R11
  BIT   R10, R11
  MOV.W R2, 56(R1)

  /* TEST BIT.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  BIT.B   R10, R11
  MOV.W R2, 56(R1)

  /* TEST BIC INSTRUCTION */
  MOV.W R6, R10
  MOV.W R7, R11
  BIC   R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST BIC.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  BIC.B   R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST BIS INSTRUCTION */
  MOV.W R6, R10
  MOV.W R7, R11
  BIS   R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST BIS.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  BIS.B   R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST XOR INSTRUCTION */
  MOV.W R6, R10
  MOV.W R7, R11
  XOR   R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST XOR.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  XOR.B   R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST AND INSTRUCTION */
  MOV.W R6, R10
  MOV.W R7, R11
  AND   R10, R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST AND.B INSTRUCTION */
  MOV.B R6, R10
  MOV.B R7, R11
  AND.B   R10, R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST RRC INSTRUCTION */
  MOV.W R7, R11
  RRC   R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST RRC.B INSTRUCTION */
  MOV.B R7, R11
  RRC.B   R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST RRA INSTRUCTION */
  MOV.W R7, R11
  RRA   R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST RRA.B INSTRUCTION */
  MOV.B R7, R11
  RRA.B   R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)


  /*  TEST RRC INSTRUCTION  */
  MOV.W R6, R11
  RRC   R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST RRC.B INSTRUCTION */
  MOV.B R6, R11
  RRC.B   R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST RRA INSTRUCTION */
  MOV.W R6, R11
  RRA   R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST RRA.B INSTRUCTION */
  MOV.B R6, R11
  RRA.B   R11
  MOV.W R2, 56(R1)
  MOV.B R11, 56(R1)

  /* TEST SWPB INSTRUCTION */
  MOV.W R6, R11
  SWPB   R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST SWPB INSTRUCTION */
  MOV.W R7, R11
  SWPB   R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST SXT INSTRUCTION */
  MOV.W R6, R11
  SXT   R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /* TEST SXT INSTRUCTION  */
  MOV.W R7, R11
  SXT   R11
  MOV.W R2, 56(R1)
  MOV.W R11, 56(R1)

  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*                           TEST MULTIPLIER                                   */
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/

  /* 16X16 UNSIGNED */
  MOV #RESLO,R10        /* RESLO address in R10 for indirect */
  MOV R6, &MPY          /* Load first operand                */
  MOV R7, &OP2          /* Load second operand               */
  NOP                   /* Need one cycle                    */
  MOV @R10+,56(R1)      /* Move RESLO                        */
  MOV @R10,56(R1)       /* Move RESHI                        */

  /* 8X8 UNSIGNED */
  MOV #RESLO,R10        /* RESLO address in R10 for indirect */
  MOV.B R6, &0130h      /* Load first operand                */
  MOV.B R7, &0138h      /* Load second operand               */
  NOP                   /* Need one cycle                    */
  MOV @R10+,56(R1)      /* Move RESLO                        */
  MOV @R10,56(R1)       /* Move RESHI                        */

  /* 16x16 Signed Multiply    */
  MOV #RESLO,R10        /* RESLO address in R10 for indirect  */
  MOV R6,&MPYS          /* Load first operand                 */
  MOV R7,&OP2           /* Load 2nd operand                   */
  NOP                   /* Need one cycle                     */
  MOV @R10+,56(R1)      /* Move RESLO                         */
  MOV @R10,56(R1)       /* Move RESHI                         */

  /* 8X8 Signed Multiply  */
  MOV #RESLO,R10        /* RESLO address in R10 for indirect */
  MOV.B R6,&0132h       /* Load first operand                */
  SXT &0132h
  MOV.B R7,&0138h       /* Load 2nd operand                  */
  SXT &0138h
  NOP                   /* Need one cycle                    */
  MOV @R10+,56(R1)      /* Move RESLO                        */
  MOV @R10,56(R1)       /* Move RESHI                        */

  /* 16x16 Unsigned Multiply Accumulate   */
  MOV #RESLO,R10        /* RESLO address in R10 for indirect */
  MOV R6,&MAC           /* Load first operand                */
  MOV R7,&OP2           /* Load 2nd operand                  */
  NOP                   /* Need one cycle                    */
  MOV @R10+,56(R1)      /* Move RESLO                        */
  MOV @R10,56(R1)       /* Move RESHI                        */

  /* 8X8 Unsigned Multiply Accumulate */
  MOV #RESLO,R10        /* RESLO address in R10 for indirect */
  MOV.B R6,&0134h       /* Load first operand                */
  MOV.B R7,&0138h       /* Load 2nd operand                  */
  NOP                   /* Need one cycle                    */
  MOV @R10+,56(R1)      /* Move RESLO                        */
  MOV @R10,56(R1)       /* Move RESHI                        */

  /* 16x16 Signed Multiply Accumulate */
  MOV #RESLO,R10        /* RESLO address in R10 for indirect */
  MOV R6,&MACS          /* Load first operand                */
  MOV R7,&OP2           /* Load 2nd operand                  */
  NOP ; Need one cycle
  MOV @R10+,56(R1)      /* Move RESLO                        */
  MOV @R10,56(R1)       /* Move RESHI                        */

  /* 8X8 Signed Multiply Accumulate
  MOV #RESLO,R10        /* RESLO address in R10 for indirect */
  MOV R6,&0136h         /* Load first operand                */
  SXT &0136h
  MOV.B R7, R12
  SXT R12
  MOV R12, &0138h       /* Load 2nd operand                  */
  NOP                   /* Need one cycle                    */
  MOV @R10+,56(R1)      /* Move RESLO                        */
  MOV @R10,56(R1)       /* Move RESHI                        */



  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/

  /* Increment counter */
  INC.W R14
  CMP R14, R15
  JEQ test_jump_instructions

  JMP L3_1


  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*                            DO-WHILE LOOP END                                */
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/


  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  /*                         TEST JUMP INSTRUCTION                               */
  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  test_jump_instructions:
  MOV.W #0x00FF, R4
  MOV.W #0X00FF, R5

  CMP R4, R5

  JEQ jne_test

  MOV.W R4, 64(R1)

  jne_test:
  MOV.W #0x00FF, R4
  MOV.W #0X0000, R5

  CMP R4, R5

  JNE jc_test

  MOV.W #0xACDB, 66(R1)

  jc_test:
  MOV #0x0100, R5
  ADD.B #10, R5

  JC jnc_test
  MOV R2, 66(R1)
  MOV.B R5, 68(R1)

  jnc_test:
  MOV #0x0000, R5
  ADD.B #10, R5

  JNC jn_test
  MOV R2, 66(R1)
  MOV.B R5, 68(R1)

  jn_test:
  MOV.B #5, R5
  SUB.B #10, R5

  JN jge_test
  MOV R2, 66(R1)
  MOV.B R5, 68(R1)

  jge_test:
  MOV.B #5, R5
  MOV.B #10, R6
  CMP.B R5, R6
  JGE jl_test
  MOV R2, 68(R1)

  jl_test:
  MOV.B #5, R5
  MOV.B #10, R6
  CMP.B R6, R5
  JGE jmp_test
  MOV R2, 68(R1)

  jmp_test:
  JMP test_r1
  MOV R5, 68(R1)

  /*-----------------------------------------------------------------------------*/
  /*-----------------------------------------------------------------------------*/
  test_r1:
  /*-----------------------------------------------------------------------------*/
  /*                             MARCH ALG. FOR R1                               */
  /*-----------------------------------------------------------------------------*/
  MOV.W R1, R6          /* SAVE THE POINTER  */
  MOV.W #0x0000, R5
  MOV.W #0x0000, R1
  MOV.W R1, 0(R5)
  MOV.W #0xFFFF, 0(R5)

  MOV.B #0x00, R5
  MOV.B #0x00, R1
  MOV.B R1, 0(R5)
  MOV.B #0xFF, 0(R5)

  MOV.W R6, R1          /* RESTORE THE POINTER  */

  MOV.W #function_call, R5
  CALL R5

  MOV.W #0xFFC0, 68(R1)
  JMP end_of_test


  function_call:
  MOV.W #0xAFDA, 0(R1)
  MOV.W #0xFFDA, 0(R1)
  JMP end_of_test



        /*-----------------------------------------------------------------------------*/
        /*-----------------------------------------------------------------------------*/
        /* ----------------------         END OF TEST        ------------------------- */
        /*-----------------------------------------------------------------------------*/
        /*-----------------------------------------------------------------------------*/
        /* FINAL PART, PERFORM SPECIFIC OPERATION TO TEST EACH MODULE                  */
  end_of_test:

  /*-----------------------------------------------------------------------------*/
  /* -----------------------------  TEST ON SFR * ------------------------------ */
  /*-----------------------------------------------------------------------------*/

  /* -------   READ/WRITE IFG1	   ------ */

  mov   &IFG1,   56(r1)
 	mov   #0x5555, &IFG1
  mov   &IFG1,   56(r1)
 	mov   #0xAAAA, &IFG1
  mov   &IFG1,   56(r1)
 	mov.b #0x55,   &IFG1
  mov.b &IFG1,   56(r1)
  mov.b #0xAA,    &IFG1_HI
  mov.b &IFG1_HI, 56(r1)
  mov   #0x0000, &IFG1
  mov   &IFG1,   56(r1)

  /* -------   READ/WRITE IE1         ------ */

	mov   &IE1,    56(r1)
	mov   #0x5555, &IE1
	mov   &IE1,    56(r1)
	mov   #0xAAAA, &IE1
	mov   &IE1,    56(r1)
	mov.b #0x55,   &IE1
	mov.b &IE1,    56(r1)
	mov.b #0xAA,    &IE1_HI
	mov.b &IE1_HI,  56(r1)
	mov   #0x0000, &IE1
	mov   &IE1,    56(r1)

  /* -------   WATCHDOG        ------ */

  mov   #0x5a90, &WDTCTL    ;# Enable interval mode & disable timer
  mov &WDTCTL, 56(R1)

  /* -------   READ/WRITE CPU_ID     ------ */

  mov   &CPU_ID_LO, 56(r1)
  mov   &CPU_ID_HI, 56(r1)
  mov   0x5554,     &CPU_ID_LO
  mov   0xAAAA,     &CPU_ID_HI
  mov   &CPU_ID_LO, 56(r1)
  mov   &CPU_ID_HI, 56(r1)
  mov   0xAAAA,     &CPU_ID_LO
  mov   0x5554,     &CPU_ID_HI
  mov   &CPU_ID_LO, 56(r1)
  mov   &CPU_ID_HI, 56(r1)

  /* -------   READ/WRITE CPU_NR     ------ */

  mov   &CPU_NR, 56(r1)
  mov   0x5554,  &CPU_NR
  mov   &CPU_NR, 56(r1)
  mov   0xAAAA,  &CPU_NR
  mov   &CPU_NR, 56(r1)
  /* -------------------------------------------------- */
  /* --------------  END OF TEST ON SFR * ------------- */
  /* -------------------------------------------------- */

  /* ---------------------------------------------------------------*/
  /* -------------------TEST ON AUTOINCREMENT MODE------------------*/
  /* ---------------------------------------------------------------*/

  /* ---------------------- INITIALIZE MEMORY --------------------- */

  mov     #0x0000,    &DMEM_200
  mov     #0x0000,    &DMEM_202
  mov     #0x1111,    &DMEM_204
  mov     #0x2222,    &DMEM_206
  mov     #0x3333,    &DMEM_208
  mov     #0x4444,    &DMEM_20A
  mov     #0x5555,    &DMEM_20C
  mov     #0x6666,    &DMEM_20E
  mov     #0x7777,    &DMEM_210
  mov     #0x8888,    &DMEM_212
  mov     #0x9999,    &DMEM_214
  mov     #0xAAAA,    &DMEM_216
  mov     #0xBBBB,    &DMEM_218
  mov     #0xCCCC,    &DMEM_21A
  mov     #0xDDDD,    &DMEM_21C
  mov     #0xEEEE,    &DMEM_21E
  mov     #0xFFFF,    &DMEM_220
  mov     #0x1122,    &DMEM_222

  mov     #0x0001,    &DMEM_200

  /* ---------------------- AUTO-INCREMENT: R1 --------------------- */

  mov     #DMEM_204,  r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x1000,    &DMEM_200
  mov        @r1+,    &DMEM_202
  mov     #0x1001,    &DMEM_200
  mov        @r1+,    &DMEM_202
  mov     #0x1002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R2 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0004,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x2000,    &DMEM_200
  mov        @r2+,    &DMEM_202
  mov     #0x2001,    &DMEM_200
  mov        @r2+,    &DMEM_202
  mov     #0x2002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R3 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #DMEM_208,  r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x3000,    &DMEM_200
  mov        @r3+,    &DMEM_202
  mov     #0x3001,    &DMEM_200
  mov        @r3+,    &DMEM_202
  mov     #0x3002,    &DMEM_200
  swpb       @r3+
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R4 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #DMEM_20A,  r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x4000,    &DMEM_200
  mov        @r4+,    &DMEM_202
  mov     #0x4001,    &DMEM_200
  mov        @r4+,    &DMEM_202
  mov     #0x4002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R5 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #DMEM_20C,  r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x5000,    &DMEM_200
  mov        @r5+,    &DMEM_202
  mov     #0x5001,    &DMEM_200
  mov        @r5+,    &DMEM_202
  mov     #0x5002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R6 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #DMEM_20E,  r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x6000,    &DMEM_200
  mov        @r6+,    &DMEM_202
  mov     #0x6001,    &DMEM_200
  mov        @r6+,    &DMEM_202
  mov     #0x6002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R7 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #DMEM_210,  r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x7000,    &DMEM_200
  mov        @r7+,    &DMEM_202
  mov     #0x7001,    &DMEM_200
  mov        @r7+,    &DMEM_202
  mov     #0x7002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R8 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #DMEM_212,  r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x8000,    &DMEM_200
  mov        @r8+,    &DMEM_202
  mov     #0x8001,    &DMEM_200
  mov        @r8+,    &DMEM_202
  mov     #0x8002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R9 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #DMEM_214,  r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x9000,    &DMEM_200
  mov         @r9+,   &DMEM_202
  mov     #0x9001,    &DMEM_200
  mov         @r9+,   &DMEM_202
  mov     #0x9002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R10 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #DMEM_216,  r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0xA000,    &DMEM_200
  mov       @r10+,    &DMEM_202
  mov     #0xA001,    &DMEM_200
  mov       @r10+,    &DMEM_202
  mov     #0xA002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R11 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #DMEM_218,  r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0xB000,    &DMEM_200
  mov       @r11+,    &DMEM_202
  mov     #0xB001,    &DMEM_200
  mov       @r11+,    &DMEM_202
  mov     #0xB002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R12 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #DMEM_21A,  r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0xC000,    &DMEM_200
  mov       @r12+,    &DMEM_202
  mov     #0xC001,    &DMEM_200
  mov       @r12+,    &DMEM_202
  mov     #0xC002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R13 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #DMEM_21C,  r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0xD000,    &DMEM_200
  mov       @r13+,    &DMEM_202
  mov     #0xD001,    &DMEM_200
  mov       @r13+,    &DMEM_202
  mov     #0xD002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R14 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #DMEM_21E,  r14
  mov     #0x0000,    r15

  mov     #0xE000,    &DMEM_200
  mov       @r14+,    &DMEM_202
  mov     #0xE001,    &DMEM_200
  mov       @r14+,    &DMEM_202
  mov     #0xE002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R15 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #DMEM_220,  r15

  mov     #0xF000,    &DMEM_200
  mov       @r15+,    &DMEM_202
  mov     #0xF001,    &DMEM_200
  mov       @r15+,    &DMEM_202
  mov     #0xF002,    &DMEM_200
  mov     #0x0000,    &DMEM_202
  /* ---------------------------------------------------------------*/
  /* ----------------END OF TEST ON AUTOINCREMENT MODE--------------*/
  /* ---------------------------------------------------------------*/

  /* ---------------------------------------------------------------*/
  /* ------------------TEST ON AUTOINCREMENT MODE .B----------------*/
  /* ---------------------------------------------------------------*/

  /* ---------------------- INITIALIZE MEMORY --------------------- */

  mov     #0x0000,    &DMEM_200
  mov     #0x1020,    &DMEM_202
  mov     #0x1122,    &DMEM_204
  mov     #0x3344,    &DMEM_206
  mov     #0x5566,    &DMEM_208
  mov     #0x7788,    &DMEM_20A
  mov     #0x99AA,    &DMEM_20C
  mov     #0xBBCC,    &DMEM_20E
  mov     #0xDDEE,    &DMEM_210
  mov     #0xFF21,    &DMEM_212
  mov     #0x1223,    &DMEM_214
  mov     #0x3445,    &DMEM_216
  mov     #0x5667,    &DMEM_218
  mov     #0x7889,    &DMEM_21A
  mov     #0x9AAB,    &DMEM_21C
  mov     #0xBCCD,    &DMEM_21E
  mov     #0xDEEF,    &DMEM_220
  mov     #0xF001,    &DMEM_222

  mov     #0x0001,    &DMEM_200

  /* ---------------------- AUTO-INCREMENT: R1 --------------------- */
  /*                                                                 */
  /* NOTE:	 it increment by 2 even in byte mode               */

  mov     #DMEM_204,  r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x1000,    &DMEM_200
  mov.b      @r1+,    &DMEM_202
  mov     #0x1001,    &DMEM_200
  mov.b      @r1+,    &DMEM_202
  mov     #0x1002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R2 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0004,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x2000,    &DMEM_200
  mov.b      @r2+,    &DMEM_202
  mov     #0x2001,    &DMEM_200
  mov.b      @r2+,    &DMEM_202
  mov     #0x2002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R3 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #DMEM_208,  r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x3000,    &DMEM_200
  mov.b      @r3+,    &DMEM_202
  mov     #0x3001,    &DMEM_200
  mov.b      @r3+,    &DMEM_202
  mov     #0x3002,    &DMEM_200
  swpb       @r3+
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R4 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #DMEM_20A,  r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x4000,    &DMEM_200
  mov.b      @r4+,    &DMEM_202
  mov     #0x4001,    &DMEM_200
  mov.b      @r4+,    &DMEM_202
  mov     #0x4002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R5 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #DMEM_20C,  r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x5000,    &DMEM_200
  mov.b      @r5+,    &DMEM_202
  mov     #0x5001,    &DMEM_200
  mov.b      @r5+,    &DMEM_202
  mov     #0x5002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R6 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #DMEM_20E,  r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x6000,    &DMEM_200
  mov.b      @r6+,    &DMEM_202
  mov     #0x6001,    &DMEM_200
  mov.b      @r6+,    &DMEM_202
  mov     #0x6002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R7 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #DMEM_210,  r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x7000,    &DMEM_200
  mov.b      @r7+,    &DMEM_202
  mov     #0x7001,    &DMEM_200
  mov.b      @r7+,    &DMEM_202
  mov     #0x7002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R8 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #DMEM_212,  r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x8000,    &DMEM_200
  mov.b      @r8+,    &DMEM_202
  mov     #0x8001,    &DMEM_200
  mov.b      @r8+,    &DMEM_202
  mov     #0x8002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R9 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #DMEM_214,  r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0x9000,    &DMEM_200
  mov.b       @r9+,   &DMEM_202
  mov     #0x9001,    &DMEM_200
  mov.b       @r9+,   &DMEM_202
  mov     #0x9002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R10 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #DMEM_216,  r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0xA000,    &DMEM_200
  mov.b     @r10+,    &DMEM_202
  mov     #0xA001,    &DMEM_200
  mov.b     @r10+,    &DMEM_202
  mov     #0xA002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R11 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #DMEM_218,  r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0xB000,    &DMEM_200
  mov.b     @r11+,    &DMEM_202
  mov     #0xB001,    &DMEM_200
  mov.b     @r11+,    &DMEM_202
  mov     #0xB002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R12 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #DMEM_21A,  r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0xC000,    &DMEM_200
  mov.b     @r12+,    &DMEM_202
  mov     #0xC001,    &DMEM_200
  mov.b     @r12+,    &DMEM_202
  mov     #0xC002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R13 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #DMEM_21C,  r13
  mov     #0x0000,    r14
  mov     #0x0000,    r15

  mov     #0xD000,    &DMEM_200
  mov.b     @r13+,    &DMEM_202
  mov     #0xD001,    &DMEM_200
  mov.b     @r13+,    &DMEM_202
  mov     #0xD002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R14 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #DMEM_21E,  r14
  mov     #0x0000,    r15

  mov     #0xE000,    &DMEM_200
  mov.b     @r14+,    &DMEM_202
  mov     #0xE001,    &DMEM_200
  mov.b     @r14+,    &DMEM_202
  mov     #0xE002,    &DMEM_200
  mov     #0x0000,    &DMEM_202

  /* ---------------------- AUTO-INCREMENT: R15 --------------------- */

  mov     #0x0000,    r1
  mov     #0x0000,    r2
  mov     #0x0000,    r3
  mov     #0x0000,    r4
  mov     #0x0000,    r5
  mov     #0x0000,    r6
  mov     #0x0000,    r7
  mov     #0x0000,    r8
  mov     #0x0000,    r9
  mov     #0x0000,    r10
  mov     #0x0000,    r11
  mov     #0x0000,    r12
  mov     #0x0000,    r13
  mov     #0x0000,    r14
  mov     #DMEM_220,  r15

  mov     #0xF000,    &DMEM_200
  mov.b     @r15+,    &DMEM_202
  mov     #0xF001,    &DMEM_200
  mov.b     @r15+,    &DMEM_202
  mov     #0xF002,    &DMEM_200
  mov     #0x0000,    &DMEM_202
  /* ---------------------------------------------------------------*/
  /* ---------------END OF EST ON AUTOINCREMENT MODE .B-------------*/
  /* ---------------------------------------------------------------*/

  /* ---------------------------------------------------------------*/
  /* --------------------TEST ALL ADDRESSING MODES------------------*/
  /* ---------------------------------------------------------------*/
  /* ---------------------- INITIALIZE REGISTERS --------------------- */
  mov     #0x2202, r2
  mov     #0x3333, r3
  mov     #0x4444, r4
  mov     #0x5555, r5
  mov     #0x6666, r6
  mov     #0x7777, r7
  mov     #0x8888, r8
  mov     #0x9999, r9
  mov     #0xaaaa, r10
  mov     #0xbbbb, r11
  mov     #0xcccc, r12
  mov     #0xdddd, r13
  mov     #0xeeee, r14

  mov     #0x1000, r15


  /* ---------------------- TEST WHEN SOURCE IS Rn ------------------- */
  .set   Rn_EDE,  DMEM_212+PMEM_EDE_LENGTH
  .set   Rn_TONY, DMEM_214

  mov     #0x4444, r4
  mov     #0x5555, r5
  add          r4, r5        ;# Add r4+r5 (0x4444+0x5555=0x9999)

  mov     #0x000a, r4
  add          r4, r0
  nop
  nop
  nop
  mov     #0x1234, r4        ;# Make sure the jump is taken
  test_Rn_PC:

  mov     #0x2222, &DMEM_210
  mov   #DMEM_200, r6
  mov     #0x3333, r7
  add          r7, 16(r6)    ;# Write 0x2222+0x3333=0x5555 to memory @0x0210

  mov     #0x4444, &DMEM_212
  mov     #0x5678, r7
  add          r7, Rn_EDE    ;# Write 0x4444+0x5678=0x9abc to memory @0x0212

  mov     #0x5555, &DMEM_214
  mov     #0x1234, r8
  add          r8, &Rn_TONY  ;# Write 0x5555+0x1234=0x6789 to memory @0x0214

  mov     #0x2000, r15


  /* ---------------------- TEST WHEN SOURCE IS @Rn ------------------ */
  .set   aRn_EDE,  DMEM_212+PMEM_EDE_LENGTH
  .set   aRn_TONY, DMEM_214

  mov   #DMEM_200, r4
  mov     #0x1111, &DMEM_200
  mov     #0x6666, r5
  add         @r4, r5        ;# Add @r4+r5 (0x1111+0x6666=0x7777)

  mov   #DMEM_200, r4
  mov     #0x000a, &DMEM_200
  add         @r4, r0
  nop
  nop
  nop
  mov     #0x1234, r4        ;# Make sure the jump is taken
  test_aRn_PC:

  mov     #0x1234, &DMEM_20E
  mov     #0x5432, &DMEM_210
  mov   #DMEM_200, r6
  mov   #DMEM_20E, r7
  add         @r7, 16(r6)    ;# Write 0x1234+0x5432=0x6666 to memory @0x0210

  mov     #0x5f12, &DMEM_200
  mov     #0x8e1c, &DMEM_212
  mov   #DMEM_200, r7
  add         @r7, aRn_EDE    ;# Write 0x5f12+0x8e1c=0xed2e to memory @0x0212

  mov     #0x3112, &DMEM_202
  mov     #0x1541, &DMEM_214
  mov   #DMEM_202, r8
  add         @r8, &aRn_TONY  ;# Write 0x3112+0x1541=0x4653 to memory @0x0214

  mov     #0x3000, r15



  /* ---------------------- TEST WHEN SOURCE IS @Rn+ ----------------- */
  .set   aRni_EDE,  DMEM_212+PMEM_EDE_LENGTH
  .set   aRni_TONY, DMEM_214

  mov   #DMEM_200, r4
  mov     #0x2222, &DMEM_200
  mov     #0x8888, r5
  add        @r4+, r5         ;# Add @r4+r5 (0x2222+0x8888=0xaaaa)

  mov   #DMEM_204, r6
  mov     #0x000a, &DMEM_204
  add        @r6+, r0
  nop
  nop
  nop
  mov     #0x1234, r6         ;# Make sure the jump is taken
  test_aRni_PC:

  mov     #0x1234, &DMEM_20E
  mov     #0x5432, &DMEM_210
  mov   #DMEM_200, r8
  mov   #DMEM_20E, r7
  add        @r7+, 16(r8)     ;# Write 0x1234+0x5432=0x6666 to memory @0x0210

  mov     #0x5f12, &DMEM_206
  mov     #0x8e1c, &DMEM_212
  mov   #DMEM_206, r8
  add        @r8+, aRni_EDE   ;# Write 0x5f12+0x8e1c=0xed2e to memory @0x0212

  mov     #0x3112, &DMEM_202
  mov     #0x1541, &DMEM_214
  mov   #DMEM_202, r9
  add        @r9+, &aRni_TONY ;# Write 0x3112+0x1541=0x4653 to memory @0x0214

  mov      #0x4000, r15



  /* ---------------------- TEST WHEN SOURCE IS #N ------------------- */
  .set   N_EDE,  DMEM_210+PMEM_EDE_LENGTH
  .set   N_TONY, DMEM_206

  mov      #0x3210, r4
  add      #0x1234, r4         ;# Write 0x3210+0x1234=0x4444 to R4

  mov      #0x0000, r5
  add      #0x000a, r0
  nop
  nop
  nop
  mov      #0x1234, r5         ;# Make sure the jump is taken
  test_N_PC:

  mov      #0x5432, &DMEM_230
  mov    #DMEM_200, r6
  add      #0x5a5a, 48(r6)     ;# Write 0x5432+0x5a5a=0xae8c to memory @0x0230

  mov      #0x4325, &DMEM_210
  add      #0x1a2b, N_EDE      ;# Write 0x4325+0x1a2b=0x5d50 to memory @0x0210

  mov      #0x3254, &DMEM_206
  add      #0x3c4d, &N_TONY    ;# Write 0x3254+0x3c4d=0x6ea1 to memory @0x0206

  mov      #0x5000, r15


  /* ---------------------- TEST WHEN SOURCE IS x(Rn) ---------------- */
  .set   xRn_EDE,  DMEM_220+PMEM_EDE_LENGTH
  .set   xRn_TONY, DMEM_208

  mov      #0x8347, &DMEM_210
  mov      #0x1234, r5
  mov    #DMEM_200, r4
  add       16(r4), r5         ;# Write 0x8347+0x1234=0x957b to R5

  mov      #0x000a, &DMEM_208
  mov    #DMEM_200, r4
  mov      #0x1234, r6
  add        8(r4), r0
  nop
  nop
  nop
  nop
  mov      #0x0000, r6         ;# Make sure the jump is taken
  test_xRn_PC:

  mov      #0x4241, &DMEM_210
  mov      #0x1535, &DMEM_214
  mov    #DMEM_200, r7
  mov    #DMEM_202, r8
  add       16(r7), 18(r8)     ;# Write 0x4241+0x1535=0x5776 to memory @0x214

  mov      #0x7238, &DMEM_204
  mov      #0x2143, &DMEM_220
  mov    #DMEM_200, r7
  add        4(r7), xRn_EDE    ;# Write 0x7238+0x2143=0x937b to memory @0x220

  mov      #0x98b2, &DMEM_216
  mov      #0x1432, &DMEM_208
  mov    #DMEM_200, r7
  add       22(r4), &xRn_TONY  ;# Write 0x0x98b2+0x1432=0xace4 to memory @0x208

  mov      #0x6000, r15


  /* ---------------------- TEST WHEN SOURCE IS 'EDE' ---------------- */
  .set   EDE_EDE,  DMEM_216+PMEM_EDE_LENGTH
  .set   EDE_TONY, DMEM_212

  .set   EDE_200,  DMEM_200+PMEM_EDE_LENGTH
  .set   EDE_202,  DMEM_202+PMEM_EDE_LENGTH
  .set   EDE_204,  DMEM_204+PMEM_EDE_LENGTH
  .set   EDE_206,  DMEM_206+PMEM_EDE_LENGTH
  .set   EDE_208,  DMEM_208+PMEM_EDE_LENGTH

  mov      #0xc3d6, &DMEM_200
  mov      #0x1234, &DMEM_204
  mov      #0x4321, r4
  add      EDE_200, r4          ;# Write 0xc3d6+0x4321=0x06f7 to R4

  mov      #0x000a, &DMEM_202
  mov      #0x1234, &DMEM_204
  mov      #0x3456, r6
  add      EDE_202, r0
  nop
  nop
  nop
  nop
  mov      #0x0000, r6          ;# Make sure the jump is taken
  test_EDE_PC:

  mov    #DMEM_202, r8
  mov      #0xf712, &DMEM_204
  mov      #0x1234, &DMEM_214
  mov      #0x0000, &DMEM_208
  add      EDE_204, 18(r8)      ;# Write 0xf712+0x1234=0x0946 to memory @0x214

  mov      #0xb3a9, &DMEM_206
  mov      #0x058a, &DMEM_216
  mov      #0x1234, &DMEM_208
  add      EDE_206, EDE_EDE     ;# Write 0xb3a9+0x058a=0xb933 to memory @0x216

  mov      #0x837A, &DMEM_208
  mov      #0xA738, &DMEM_212
  mov      #0x1234, &DMEM_20A
  add      EDE_208, &EDE_TONY   ;# Write 0x837A+0xA738=0x2ab2 to memory @0x212

  mov      #0x7000, r15



  /* ---------------------- TEST WHEN SOURCE IS '&EDE' --------------- */
  .set   aEDE_EDE,  DMEM_218+PMEM_EDE_LENGTH
  .set   aEDE_TONY, DMEM_202

  mov      #0x23d4, &DMEM_200
  mov      #0x1234, &DMEM_202
  mov      #0x4321, r4
  add    &DMEM_200, r4          ;# Write 0x23d4+0x4321=0x66f5 to R4

  mov      #0x000a, &DMEM_202
  mov      #0x1234, &DMEM_204
  mov      #0x3456, r6
  add    &DMEM_202, r0
  nop
  nop
  nop
  nop
  mov      #0x0000, r6          ;# Make sure the jump is taken
  test_aEDE_PC:

  mov    #DMEM_202, r7
  mov      #0x481c, &DMEM_204
  mov      #0x3ab5, &DMEM_214
  mov      #0x1234, &DMEM_206
  add    &DMEM_204, 18(r7)      ;# Write 0x481c+0x3ab5=0x82d1 to memory @0x214

  mov      #0x5c1f, &DMEM_206
  mov      #0x6e2f, &DMEM_218
  mov      #0x1234, &DMEM_208
  add    &DMEM_206, aEDE_EDE    ;# Write 0x5c1f+0x6e2f=0xca4e to memory @0x218

  mov      #0xc16e, &DMEM_208
  mov      #0x51ca, &DMEM_202
  mov      #0x1234, &DMEM_20A
  add    &DMEM_208, &aEDE_TONY  ;# Write 0xc16e+0x51ca=0x1338 to memory @0x202

  mov      #0x8000, r15


  /* ---------------------- TEST WHEN SOURCE IS CONSTANT ------------- */
  .set   CONST_EDE0,   DMEM_220+PMEM_EDE_LENGTH
  .set   CONST_EDE1,   DMEM_222+PMEM_EDE_LENGTH
  .set   CONST_EDE2,   DMEM_224+PMEM_EDE_LENGTH
  .set   CONST_EDE4,   DMEM_226+PMEM_EDE_LENGTH
  .set   CONST_EDE8,   DMEM_228+PMEM_EDE_LENGTH
  .set   CONST_EDEm1,  DMEM_22A+PMEM_EDE_LENGTH

  .set   CONST_TONY0,  DMEM_230
  .set   CONST_TONY1,  DMEM_232
  .set   CONST_TONY2,  DMEM_234
  .set   CONST_TONY4,  DMEM_236
  .set   CONST_TONY8,  DMEM_238
  .set   CONST_TONYm1, DMEM_23A


  mov      #0x4444, r4              ;# Initialize registers
  mov      #0x5555, r5
  mov      #0x6666, r6
  mov      #0x7777, r7
  mov      #0x8888, r8
  mov      #0x9999, r9
  add      #0x0000, r4              ;# Write 0x4444+0 to R4
  add      #0x0001, r5              ;# Write 0x5555+1 to R5
  add      #0x0002, r6              ;# Write 0x6666+2 to R6
  add      #0x0004, r7              ;# Write 0x7777+4 to R7
  add      #0x0008, r8              ;# Write 0x8888+8 to R8
  add      #0xffff, r9              ;# Write 0x9999-1 to R9

  mov      #0x1234, r11
  add      #0x0004, r0
  clr      r11
  clr      r11
  jmp      end_const_r0
  clr      r11
  clr      r11
  end_const_r0:

  mov    #DMEM_202, r10
  mov      #0x4444, &DMEM_210       ;# Initialize Memory
  mov      #0x5555, &DMEM_212
  mov      #0x6666, &DMEM_214
  mov      #0x7777, &DMEM_216
  mov      #0x8888, &DMEM_218
  mov      #0x9999, &DMEM_21A
  add      #0x0000, 14(r10)         ;# Move 0x4444+0 to memory @0x210
  add      #0x0001, 16(r10)         ;# Move 0x5555+1 to memory @0x212
  add      #0x0002, 18(r10)         ;# Move 0x6666+2 to memory @0x214
  add      #0x0004, 20(r10)         ;# Move 0x7777+4 to memory @0x216
  add      #0x0008, 22(r10)         ;# Move 0x8888+8 to memory @0x218
  add      #0xffff, 24(r10)         ;# Move 0x9999-1 to memory @0x21A


  mov      #0x4444, &DMEM_220       ;# Initialize Memory
  mov      #0x5555, &DMEM_222
  mov      #0x6666, &DMEM_224
  mov      #0x7777, &DMEM_226
  mov      #0x8888, &DMEM_228
  mov      #0x9999, &DMEM_22A
  add      #0x0000, CONST_EDE0      ;# Move 0x4444+0 to memory @0x220
  add      #0x0001, CONST_EDE1      ;# Move 0x5555+1 to memory @0x222
  add      #0x0002, CONST_EDE2      ;# Move 0x6666+2 to memory @0x224
  add      #0x0004, CONST_EDE4      ;# Move 0x7777+4 to memory @0x226
  add      #0x0008, CONST_EDE8      ;# Move 0x8888+8 to memory @0x228
  add      #0xffff, CONST_EDEm1     ;# Move 0x9999-1 to memory @0x22A

  mov      #0x4444, &DMEM_230       ;# Initialize Memory
  mov      #0x5555, &DMEM_232
  mov      #0x6666, &DMEM_234
  mov      #0x7777, &DMEM_236
  mov      #0x8888, &DMEM_238
  mov      #0x9999, &DMEM_23A
  add      #0x0000, &CONST_TONY0    ;# Move 0x4444+0 to memory @0x230
  add      #0x0001, &CONST_TONY1    ;# Move 0x5555+1 to memory @0x232
  add      #0x0002, &CONST_TONY2    ;# Move 0x6666+2 to memory @0x234
  add      #0x0004, &CONST_TONY4    ;# Move 0x7777+4 to memory @0x236
  add      #0x0008, &CONST_TONY8    ;# Move 0x8888+8 to memory @0x238
  add      #0xffff, &CONST_TONYm1   ;# Move 0x9999-1 to memory @0x23A

  mov      #0x9000, r15


  /* ------------------------------ TEST FLAGS ---------------------- */

  mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=0
  mov     #0x0444, r4        ;#
  mov     #0x0555, r5        ;#
  add          r4, r5        ;# Add r4+r5 (0x0444+0x0555=0x0999)
  mov     #0xA000, r15

  mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
  mov     #0x0011, r4        ;#
  mov     #0xfff0, r5        ;#
  add          r4, r5        ;# Add r4+r5 (0xfff0+0x0011=0x0001)
  mov     #0xA001, r15

  mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=0
  mov     #0x0000, r4        ;#
  mov     #0x0000, r5        ;#
  add          r4, r5        ;# Add r4+r5 (0x0000+0x0000=0x0000)
  mov     #0xA002, r15

  mov     #0x0000, r2        ;# V=0, N=1, Z=0, C=0
  mov     #0xff00, r4        ;#
  mov     #0x0010, r5        ;#
  add          r4, r5        ;# Add r4+r5 (0xff00+0x0010=0xff10)
  mov     #0xA003, r15

  mov     #0x0000, r2        ;# V=1, N=1, Z=0, C=0
  mov     #0x7fff, r4        ;#
  mov     #0x0010, r5        ;#
  add          r4, r5        ;# Add r4+r5 (0x7fff+0x0010=0x800f)
  mov     #0xA004, r15

  mov     #0x0000, r2        ;# V=1, N=0, Z=0, C=1
  mov     #0xff00, r4        ;#
  mov     #0x8000, r5        ;#
  add          r4, r5        ;# Add r4+r5 (0xff00+0x8000=0x7f00)
  mov     #0xA005, r15

  /* ---------------- TEST WHEN SOURCE IS CONSTANT IN BYTE MODE ------ */
  #
  # NOTE: The following section would not fit in the smallest ROM
  #       configuration for the "two-op_add-b.s43" pattern.
  #       It is therefore executed here.
  #
  .set   CONSTL_TONY0,  DMEM_250
  .set   CONSTL_TONY1,  DMEM_252
  .set   CONSTL_TONY2,  DMEM_254
  .set   CONSTL_TONY4,  DMEM_256
  .set   CONSTL_TONY8,  DMEM_258
  .set   CONSTL_TONYm1, DMEM_25A
  .set   CONSTH_TONY0,  DMEM_25D
  .set   CONSTH_TONY1,  DMEM_25F
  .set   CONSTH_TONY2,  DMEM_261
  .set   CONSTH_TONY4,  DMEM_263
  .set   CONSTH_TONY8,  DMEM_265
  .set   CONSTH_TONYm1, DMEM_267

  mov      #0xaa44, &DMEM_250        ;# Initialize Memory
  mov      #0xaa55, &DMEM_252
  mov      #0xaa66, &DMEM_254
  mov      #0xaa77, &DMEM_256
  mov      #0xaa35, &DMEM_258
  mov      #0xaa99, &DMEM_25A
  mov      #0xaa55, &DMEM_25C
  mov      #0xbb55, &DMEM_25E
  mov      #0xcc55, &DMEM_260
  mov      #0xdd55, &DMEM_262
  mov      #0xee55, &DMEM_264
  mov      #0x3355, &DMEM_266

  add.b    #0x0000, &CONSTL_TONY0    ;# Move +0 to memory @0x250
  add.b    #0x0001, &CONSTL_TONY1    ;# Move +1 to memory @0x252
  add.b    #0x0002, &CONSTL_TONY2    ;# Move +2 to memory @0x254
  add.b    #0x0004, &CONSTL_TONY4    ;# Move +4 to memory @0x256
  add.b    #0x0008, &CONSTL_TONY8    ;# Move +8 to memory @0x258
  add.b    #0xffff, &CONSTL_TONYm1   ;# Move -1 to memory @0x25A
  add.b    #0x0000, &CONSTH_TONY0    ;# Move +0 to memory @0x25D
  add.b    #0x0001, &CONSTH_TONY1    ;# Move +1 to memory @0x25F
  add.b    #0x0002, &CONSTH_TONY2    ;# Move +2 to memory @0x261
  add.b    #0x0004, &CONSTH_TONY4    ;# Move +4 to memory @0x263
  add.b    #0x0008, &CONSTH_TONY8    ;# Move +8 to memory @0x265
  add.b    #0xffff, &CONSTH_TONYm1   ;# Move -1 to memory @0x267

  mov      #0xB000, r15


  /* ------------------ TEST FLAGS IN BYTE MODE --------------------- */

  mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=0
  mov     #0xaa04, r4        ;#
  mov     #0x6605, r5        ;#
  add.b        r4, r5        ;# Add r4+r5 (0xaa04+0x6605=0x0009)
  mov     #0xC000, r15

  mov     #0x0000, r2        ;# V=0, N=0, Z=0, C=1
  mov     #0xaa11, r4        ;#
  mov     #0x66f0, r5        ;#
  add.b        r4, r5        ;# Add r4+r5 (0x0011+0x00f0=0x0001)
  mov     #0xC001, r15

  mov     #0x0000, r2        ;# V=0, N=0, Z=1, C=0
  mov     #0xaa00, r4        ;#
  mov     #0x6600, r5        ;#
  add.b        r4, r5        ;# Add r4+r5 (0x0000+0x0000=0x0000)
  mov     #0xC002, r15

  mov     #0x0000, r2        ;# V=0, N=1, Z=0, C=0
  mov     #0xaaf0, r4        ;#
  mov     #0x6603, r5        ;#
  add.b        r4, r5        ;# Add r4+r5 (0x00f0+0x0003=0x00f3)
  mov     #0xC003, r15

  mov     #0x0000, r2        ;# V=1, N=1, Z=0, C=0
  mov     #0x007f, r4        ;#
  mov     #0x0010, r5        ;#
  add.b        r4, r5        ;# Add r4+r5 (0x007f+0x0010=0x008f)
  mov     #0xC004, r15

  mov     #0x0000, r2        ;# V=1, N=0, Z=0, C=1
  mov     #0x00ff, r4        ;#
  mov     #0x0080, r5        ;#
  add.b        r4, r5        ;# Add r4+r5 (0x00ff+0x0080=0x007f)
  mov     #0xC005, r15

  /* ---------------------------------------------------------------*/
  /* -----------------END OF TEST ALL ADDRESSING MODES--------------*/
  /* ---------------------------------------------------------------*/

  /* ---------------------------------------------------------------*/
  /* -------------TEST ALL JUMPS (EXTENDED JUMP TEST)---------------*/
  /* ---------------------------------------------------------------*/

  /* -------------- TEST JUMP FORWARD AND BACKWARD ------------------- */

          mov     #0x0001, r2
          mov     #0x1234, r4
          jc      test_jc_fwrd1
          mov     #0x0000, r4
          mov     #0x0000, r4
          mov     #0x0000, r4
  test_jc_bckwrd:
          mov     #0x9abc, r6
          jc      test_jc_fwrd2
          mov     #0x0000, r4
          mov     #0x0000, r4
          mov     #0x0000, r4
          mov     #0x0000, r5
          mov     #0x0000, r5
          mov     #0x0000, r5
          mov     #0x0000, r6
          mov     #0x0000, r6
          mov     #0x0000, r6
  test_jc_fwrd1:
          mov     #0x5678, r5
          jc      test_jc_bckwrd
          mov     #0x0000, r4
          mov     #0x0000, r4
          mov     #0x0000, r4
          mov     #0x0000, r5
          mov     #0x0000, r5
          mov     #0x0000, r5

  test_jc_fwrd2:

          mov     #0x1000, r15
  /* -------------- TEST JUMP FOR ALL FLAG CONFIGURATIONS ------------ */

          mov     #0x0000, r2             ;# {V,N,Z,C} = 4'b0000
          mov     #0x1234, r4
          jc      test_jc_0
          mov     #0x0000, r4
  test_jc_0:
          mov     #0x2000, r15

          mov     #0x0001, r2             ;# {V,N,Z,C} = 4'b0001
          mov     #0x1234, r4
          jc      test_jc_1
          mov     #0x0000, r4
  test_jc_1:
          mov     #0x2001, r15

          mov     #0x0002, r2             ;# {V,N,Z,C} = 4'b0010
          mov     #0x1234, r4
          jc      test_jc_2
          mov     #0x0000, r4
  test_jc_2:
          mov     #0x2002, r15

          mov     #0x0003, r2             ;# {V,N,Z,C} = 4'b0011
          mov     #0x1234, r4
          jc      test_jc_3
          mov     #0x0000, r4
  test_jc_3:
          mov     #0x2003, r15

          mov     #0x0004, r2             ;# {V,N,Z,C} = 4'b0100
          mov     #0x1234, r4
          jc      test_jc_4
          mov     #0x0000, r4
  test_jc_4:
          mov     #0x2004, r15

          mov     #0x0005, r2             ;# {V,N,Z,C} = 4'b0101
          mov     #0x1234, r4
          jc      test_jc_5
          mov     #0x0000, r4
  test_jc_5:
          mov     #0x2005, r15

          mov     #0x0006, r2             ;# {V,N,Z,C} = 4'b0110
          mov     #0x1234, r4
          jc      test_jc_6
          mov     #0x0000, r4
  test_jc_6:
          mov     #0x2006, r15

          mov     #0x0007, r2             ;# {V,N,Z,C} = 4'b0111
          mov     #0x1234, r4
          jc      test_jc_7
          mov     #0x0000, r4
  test_jc_7:
          mov     #0x2007, r15

          mov     #0x0100, r2             ;# {V,N,Z,C} = 4'b1000
          mov     #0x1234, r4
          jc      test_jc_8
          mov     #0x0000, r4
  test_jc_8:
          mov     #0x2008, r15

          mov     #0x0101, r2             ;# {V,N,Z,C} = 4'b1001
          mov     #0x1234, r4
          jc      test_jc_9
          mov     #0x0000, r4
  test_jc_9:
          mov     #0x2009, r15

          mov     #0x0102, r2             ;# {V,N,Z,C} = 4'b1010
          mov     #0x1234, r4
          jc      test_jc_A
          mov     #0x0000, r4
  test_jc_A:
          mov     #0x200A, r15

          mov     #0x0103, r2             ;# {V,N,Z,C} = 4'b1011
          mov     #0x1234, r4
          jc      test_jc_B
          mov     #0x0000, r4
  test_jc_B:
          mov     #0x200B, r15

          mov     #0x0104, r2             ;# {V,N,Z,C} = 4'b1100
          mov     #0x1234, r4
          jc      test_jc_C
          mov     #0x0000, r4
  test_jc_C:
          mov     #0x200C, r15

          mov     #0x0105, r2             ;# {V,N,Z,C} = 4'b1101
          mov     #0x1234, r4
          jc      test_jc_D
          mov     #0x0000, r4
  test_jc_D:
          mov     #0x200D, r15

          mov     #0x0106, r2             ;# {V,N,Z,C} = 4'b1110
          mov     #0x1234, r4
          jc      test_jc_E
          mov     #0x0000, r4
  test_jc_E:
          mov     #0x200E, r15

          mov     #0x0107, r2             ;# {V,N,Z,C} = 4'b1111
          mov     #0x1234, r4
          jc      test_jc_F
          mov     #0x0000, r4
  test_jc_F:
          mov     #0x200F, r15

          /* -------------- TEST JUMP FORWARD AND BACKWARD ------------------- */

        mov     #0x0002, r2
        mov     #0x1234, r4
        jeq     test_jeq_fwrd1
        mov     #0x0000, r4
        mov     #0x0000, r4
        mov     #0x0000, r4
        test_jeq_bckwrd:
        mov     #0x9abc, r6
        jeq     test_jeq_fwrd2
        mov     #0x0000, r4
        mov     #0x0000, r4
        mov     #0x0000, r4
        mov     #0x0000, r5
        mov     #0x0000, r5
        mov     #0x0000, r5
        mov     #0x0000, r6
        mov     #0x0000, r6
        mov     #0x0000, r6
        test_jeq_fwrd1:
        mov     #0x5678, r5
        jeq     test_jeq_bckwrd
        mov     #0x0000, r4
        mov     #0x0000, r4
        mov     #0x0000, r4
        mov     #0x0000, r5
        mov     #0x0000, r5
        mov     #0x0000, r5

        test_jeq_fwrd2:

        mov     #0x1000, r15

          /* -------------- TEST JUMP FOR ALL FLAG CONFIGURATIONS ------------ */

        mov     #0x0000, r2             ;# {V,N,Z,C} = 4'b0000
        mov     #0x1234, r4
        jeq     test_jeq_0
        mov     #0x0000, r4
        test_jeq_0:
        mov     #0x2000, r15

        mov     #0x0001, r2             ;# {V,N,Z,C} = 4'b0001
        mov     #0x1234, r4
        jeq     test_jeq_1
        mov     #0x0000, r4
        test_jeq_1:
        mov     #0x2001, r15

        mov     #0x0002, r2             ;# {V,N,Z,C} = 4'b0010
        mov     #0x1234, r4
        jeq     test_jeq_2
        mov     #0x0000, r4
        test_jeq_2:
        mov     #0x2002, r15

        mov     #0x0003, r2             ;# {V,N,Z,C} = 4'b0011
        mov     #0x1234, r4
        jeq     test_jeq_3
        mov     #0x0000, r4
        test_jeq_3:
        mov     #0x2003, r15

        mov     #0x0004, r2             ;# {V,N,Z,C} = 4'b0100
        mov     #0x1234, r4
        jeq     test_jeq_4
        mov     #0x0000, r4
        test_jeq_4:
        mov     #0x2004, r15

        mov     #0x0005, r2             ;# {V,N,Z,C} = 4'b0101
        mov     #0x1234, r4
        jeq     test_jeq_5
        mov     #0x0000, r4
        test_jeq_5:
        mov     #0x2005, r15

        mov     #0x0006, r2             ;# {V,N,Z,C} = 4'b0110
        mov     #0x1234, r4
        jeq     test_jeq_6
        mov     #0x0000, r4
        test_jeq_6:
        mov     #0x2006, r15

        mov     #0x0007, r2             ;# {V,N,Z,C} = 4'b0111
        mov     #0x1234, r4
        jeq     test_jeq_7
        mov     #0x0000, r4
        test_jeq_7:
        mov     #0x2007, r15

        mov     #0x0100, r2             ;# {V,N,Z,C} = 4'b1000
        mov     #0x1234, r4
        jeq     test_jeq_8
        mov     #0x0000, r4
        test_jeq_8:
        mov     #0x2008, r15

        mov     #0x0101, r2             ;# {V,N,Z,C} = 4'b1001
        mov     #0x1234, r4
        jeq     test_jeq_9
        mov     #0x0000, r4
        test_jeq_9:
        mov     #0x2009, r15

        mov     #0x0102, r2             ;# {V,N,Z,C} = 4'b1010
        mov     #0x1234, r4
        jeq     test_jeq_A
        mov     #0x0000, r4
        test_jeq_A:
        mov     #0x200A, r15

        mov     #0x0103, r2             ;# {V,N,Z,C} = 4'b1011
        mov     #0x1234, r4
        jeq     test_jeq_B
        mov     #0x0000, r4
        test_jeq_B:
        mov     #0x200B, r15

        mov     #0x0104, r2             ;# {V,N,Z,C} = 4'b1100
        mov     #0x1234, r4
        jeq     test_jeq_C
        mov     #0x0000, r4
        test_jeq_C:
        mov     #0x200C, r15

        mov     #0x0105, r2             ;# {V,N,Z,C} = 4'b1101
        mov     #0x1234, r4
        jeq     test_jeq_D
        mov     #0x0000, r4
        test_jeq_D:
        mov     #0x200D, r15

        mov     #0x0106, r2             ;# {V,N,Z,C} = 4'b1110
        mov     #0x1234, r4
        jeq     test_jeq_E
        mov     #0x0000, r4
        test_jeq_E:
        mov     #0x200E, r15

        mov     #0x0107, r2             ;# {V,N,Z,C} = 4'b1111
        mov     #0x1234, r4
        jeq     test_jeq_F
        mov     #0x0000, r4
        test_jeq_F:
        mov     #0x200F, r15


        /* -------------- TEST JUMP FORWARD AND BACKWARD ------------------- */

      mov     #0x0000, r2
      mov     #0x1234, r4
      jge     test_jge_fwrd1
      mov     #0x0000, r4
      mov     #0x0000, r4
      mov     #0x0000, r4
      test_jge_bckwrd:
      mov     #0x9abc, r6
      jge     test_jge_fwrd2
      mov     #0x0000, r4
      mov     #0x0000, r4
      mov     #0x0000, r4
      mov     #0x0000, r5
      mov     #0x0000, r5
      mov     #0x0000, r5
      mov     #0x0000, r6
      mov     #0x0000, r6
      mov     #0x0000, r6
      test_jge_fwrd1:
      mov     #0x5678, r5
      jge     test_jge_bckwrd
      mov     #0x0000, r4
      mov     #0x0000, r4
      mov     #0x0000, r4
      mov     #0x0000, r5
      mov     #0x0000, r5
      mov     #0x0000, r5

      test_jge_fwrd2:

      mov     #0x1000, r15

        /* -------------- TEST JUMP FOR ALL FLAG CONFIGURATIONS ------------ */

      mov     #0x0000, r2             ;# {V,N,Z,C} = 4'b0000
      mov     #0x1234, r4
      jge     test_jge_0
      mov     #0x0000, r4
      test_jge_0:
      mov     #0x2000, r15

      mov     #0x0001, r2             ;# {V,N,Z,C} = 4'b0001
      mov     #0x1234, r4
      jge     test_jge_1
      mov     #0x0000, r4
      test_jge_1:
      mov     #0x2001, r15

      mov     #0x0002, r2             ;# {V,N,Z,C} = 4'b0010
      mov     #0x1234, r4
      jge     test_jge_2
      mov     #0x0000, r4
      test_jge_2:
      mov     #0x2002, r15

      mov     #0x0003, r2             ;# {V,N,Z,C} = 4'b0011
      mov     #0x1234, r4
      jge     test_jge_3
      mov     #0x0000, r4
      test_jge_3:
      mov     #0x2003, r15

      mov     #0x0004, r2             ;# {V,N,Z,C} = 4'b0100
      mov     #0x1234, r4
      jge     test_jge_4
      mov     #0x0000, r4
      test_jge_4:
      mov     #0x2004, r15

      mov     #0x0005, r2             ;# {V,N,Z,C} = 4'b0101
      mov     #0x1234, r4
      jge     test_jge_5
      mov     #0x0000, r4
      test_jge_5:
      mov     #0x2005, r15

      mov     #0x0006, r2             ;# {V,N,Z,C} = 4'b0110
      mov     #0x1234, r4
      jge     test_jge_6
      mov     #0x0000, r4
      test_jge_6:
      mov     #0x2006, r15

      mov     #0x0007, r2             ;# {V,N,Z,C} = 4'b0111
      mov     #0x1234, r4
      jge     test_jge_7
      mov     #0x0000, r4
      test_jge_7:
      mov     #0x2007, r15

      mov     #0x0100, r2             ;# {V,N,Z,C} = 4'b1000
      mov     #0x1234, r4
      jge     test_jge_8
      mov     #0x0000, r4
      test_jge_8:
      mov     #0x2008, r15

      mov     #0x0101, r2             ;# {V,N,Z,C} = 4'b1001
      mov     #0x1234, r4
      jge     test_jge_9
      mov     #0x0000, r4
      test_jge_9:
      mov     #0x2009, r15

      mov     #0x0102, r2             ;# {V,N,Z,C} = 4'b1010
      mov     #0x1234, r4
      jge     test_jge_A
      mov     #0x0000, r4
      test_jge_A:
      mov     #0x200A, r15

      mov     #0x0103, r2             ;# {V,N,Z,C} = 4'b1011
      mov     #0x1234, r4
      jge     test_jge_B
      mov     #0x0000, r4
      test_jge_B:
      mov     #0x200B, r15

      mov     #0x0104, r2             ;# {V,N,Z,C} = 4'b1100
      mov     #0x1234, r4
      jge     test_jge_C
      mov     #0x0000, r4
      test_jge_C:
      mov     #0x200C, r15

      mov     #0x0105, r2             ;# {V,N,Z,C} = 4'b1101
      mov     #0x1234, r4
      jge     test_jge_D
      mov     #0x0000, r4
      test_jge_D:
      mov     #0x200D, r15

      mov     #0x0106, r2             ;# {V,N,Z,C} = 4'b1110
      mov     #0x1234, r4
      jge     test_jge_E
      mov     #0x0000, r4
      test_jge_E:
      mov     #0x200E, r15

      mov     #0x0107, r2             ;# {V,N,Z,C} = 4'b1111
      mov     #0x1234, r4
      jge     test_jge_F
      mov     #0x0000, r4
      test_jge_F:
      mov     #0x200F, r15


      /* -------------- TEST JUMP FORWARD AND BACKWARD ------------------- */

    mov     #0x0100, r2
    mov     #0x1234, r4
    jl      test_jl_fwrd1
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r4
    test_jl_bckwrd:
    mov     #0x9abc, r6
    jl      test_jl_fwrd2
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r5
    mov     #0x0000, r5
    mov     #0x0000, r5
    mov     #0x0000, r6
    mov     #0x0000, r6
    mov     #0x0000, r6
    test_jl_fwrd1:
    mov     #0x5678, r5
    jl      test_jl_bckwrd
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r5
    mov     #0x0000, r5
    mov     #0x0000, r5

    test_jl_fwrd2:

    mov     #0x1000, r15

      /* -------------- TEST JUMP FOR ALL FLAG CONFIGURATIONS ------------ */

    mov     #0x0000, r2             ;# {V,N,Z,C} = 4'b0000
    mov     #0x1234, r4
    jl      test_jl_0
    mov     #0x0000, r4
    test_jl_0:
    mov     #0x2000, r15

    mov     #0x0001, r2             ;# {V,N,Z,C} = 4'b0001
    mov     #0x1234, r4
    jl      test_jl_1
    mov     #0x0000, r4
    test_jl_1:
    mov     #0x2001, r15

    mov     #0x0002, r2             ;# {V,N,Z,C} = 4'b0010
    mov     #0x1234, r4
    jl      test_jl_2
    mov     #0x0000, r4
    test_jl_2:
    mov     #0x2002, r15

    mov     #0x0003, r2             ;# {V,N,Z,C} = 4'b0011
    mov     #0x1234, r4
    jl      test_jl_3
    mov     #0x0000, r4
    test_jl_3:
    mov     #0x2003, r15

    mov     #0x0004, r2             ;# {V,N,Z,C} = 4'b0100
    mov     #0x1234, r4
    jl      test_jl_4
    mov     #0x0000, r4
    test_jl_4:
    mov     #0x2004, r15

    mov     #0x0005, r2             ;# {V,N,Z,C} = 4'b0101
    mov     #0x1234, r4
    jl      test_jl_5
    mov     #0x0000, r4
    test_jl_5:
    mov     #0x2005, r15

    mov     #0x0006, r2             ;# {V,N,Z,C} = 4'b0110
    mov     #0x1234, r4
    jl      test_jl_6
    mov     #0x0000, r4
    test_jl_6:
    mov     #0x2006, r15

    mov     #0x0007, r2             ;# {V,N,Z,C} = 4'b0111
    mov     #0x1234, r4
    jl      test_jl_7
    mov     #0x0000, r4
    test_jl_7:
    mov     #0x2007, r15

    mov     #0x0100, r2             ;# {V,N,Z,C} = 4'b1000
    mov     #0x1234, r4
    jl      test_jl_8
    mov     #0x0000, r4
    test_jl_8:
    mov     #0x2008, r15

    mov     #0x0101, r2             ;# {V,N,Z,C} = 4'b1001
    mov     #0x1234, r4
    jl      test_jl_9
    mov     #0x0000, r4
    test_jl_9:
    mov     #0x2009, r15

    mov     #0x0102, r2             ;# {V,N,Z,C} = 4'b1010
    mov     #0x1234, r4
    jl      test_jl_A
    mov     #0x0000, r4
    test_jl_A:
    mov     #0x200A, r15

    mov     #0x0103, r2             ;# {V,N,Z,C} = 4'b1011
    mov     #0x1234, r4
    jl      test_jl_B
    mov     #0x0000, r4
    test_jl_B:
    mov     #0x200B, r15

    mov     #0x0104, r2             ;# {V,N,Z,C} = 4'b1100
    mov     #0x1234, r4
    jl      test_jl_C
    mov     #0x0000, r4
    test_jl_C:
    mov     #0x200C, r15

    mov     #0x0105, r2             ;# {V,N,Z,C} = 4'b1101
    mov     #0x1234, r4
    jl      test_jl_D
    mov     #0x0000, r4
    test_jl_D:
    mov     #0x200D, r15

    mov     #0x0106, r2             ;# {V,N,Z,C} = 4'b1110
    mov     #0x1234, r4
    jl      test_jl_E
    mov     #0x0000, r4
    test_jl_E:
    mov     #0x200E, r15

    mov     #0x0107, r2             ;# {V,N,Z,C} = 4'b1111
    mov     #0x1234, r4
    jl      test_jl_F
    mov     #0x0000, r4
    test_jl_F:
    mov     #0x200F, r15


    /* -------------- TEST JUMP FORWARD AND BACKWARD ------------------- */

    mov     #0x0000, r2
    mov     #0x1234, r4
    jmp     test_jmp_fwrd1
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r4
    test_jmp_bckwrd:
    mov     #0x9abc, r6
    jmp test_jmp_fwrd2
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r5
    mov     #0x0000, r5
    mov     #0x0000, r5
    mov     #0x0000, r6
    mov     #0x0000, r6
    mov     #0x0000, r6
    test_jmp_fwrd1:
    mov     #0x5678, r5
    jmp test_jmp_bckwrd
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r4
    mov     #0x0000, r5
    mov     #0x0000, r5
    mov     #0x0000, r5

    test_jmp_fwrd2:

    mov     #0x1000, r15

    /* -------------- TEST JUMP FOR ALL FLAG CONFIGURATIONS ------------ */

    mov     #0x0000, r2             ;# {V,N,Z,C} = 4'b0000
    mov     #0x1234, r4
    jmp     test_jmp_0
    mov     #0x0000, r4
    test_jmp_0:
    mov     #0x2000, r15

    mov     #0x0001, r2             ;# {V,N,Z,C} = 4'b0001
    mov     #0x1234, r4
    jmp     test_jmp_1
    mov     #0x0000, r4
    test_jmp_1:
    mov     #0x2001, r15

    mov     #0x0002, r2             ;# {V,N,Z,C} = 4'b0010
    mov     #0x1234, r4
    jmp     test_jmp_2
    mov     #0x0000, r4
    test_jmp_2:
    mov     #0x2002, r15

    mov     #0x0003, r2             ;# {V,N,Z,C} = 4'b0011
    mov     #0x1234, r4
    jmp     test_jmp_3
    mov     #0x0000, r4
    test_jmp_3:
    mov     #0x2003, r15

    mov     #0x0004, r2             ;# {V,N,Z,C} = 4'b0100
    mov     #0x1234, r4
    jmp     test_jmp_4
    mov     #0x0000, r4
    test_jmp_4:
    mov     #0x2004, r15

    mov     #0x0005, r2             ;# {V,N,Z,C} = 4'b0101
    mov     #0x1234, r4
    jmp     test_jmp_5
    mov     #0x0000, r4
    test_jmp_5:
    mov     #0x2005, r15

    mov     #0x0006, r2             ;# {V,N,Z,C} = 4'b0110
    mov     #0x1234, r4
    jmp     test_jmp_6
    mov     #0x0000, r4
    test_jmp_6:
    mov     #0x2006, r15

    mov     #0x0007, r2             ;# {V,N,Z,C} = 4'b0111
    mov     #0x1234, r4
    jmp     test_jmp_7
    mov     #0x0000, r4
    test_jmp_7:
    mov     #0x2007, r15

    mov     #0x0100, r2             ;# {V,N,Z,C} = 4'b1000
    mov     #0x1234, r4
    jmp     test_jmp_8
    mov     #0x0000, r4
    test_jmp_8:
    mov     #0x2008, r15

    mov     #0x0101, r2             ;# {V,N,Z,C} = 4'b1001
    mov     #0x1234, r4
    jmp     test_jmp_9
    mov     #0x0000, r4
    test_jmp_9:
    mov     #0x2009, r15

    mov     #0x0102, r2             ;# {V,N,Z,C} = 4'b1010
    mov     #0x1234, r4
    jmp     test_jmp_A
    mov     #0x0000, r4
    test_jmp_A:
    mov     #0x200A, r15

    mov     #0x0103, r2             ;# {V,N,Z,C} = 4'b1011
    mov     #0x1234, r4
    jmp     test_jmp_B
    mov     #0x0000, r4
    test_jmp_B:
    mov     #0x200B, r15

    mov     #0x0104, r2             ;# {V,N,Z,C} = 4'b1100
    mov     #0x1234, r4
    jmp     test_jmp_C
    mov     #0x0000, r4
    test_jmp_C:
    mov     #0x200C, r15

    mov     #0x0105, r2             ;# {V,N,Z,C} = 4'b1101
    mov     #0x1234, r4
    jmp     test_jmp_D
    mov     #0x0000, r4
    test_jmp_D:
    mov     #0x200D, r15

    mov     #0x0106, r2             ;# {V,N,Z,C} = 4'b1110
    mov     #0x1234, r4
    jmp     test_jmp_E
    mov     #0x0000, r4
    test_jmp_E:
    mov     #0x200E, r15

    mov     #0x0107, r2             ;# {V,N,Z,C} = 4'b1111
    mov     #0x1234, r4
    jmp     test_jmp_F
    mov     #0x0000, r4
    test_jmp_F:
    mov     #0x200F, r15


    /* -------------- TEST JUMP FORWARD AND BACKWARD ------------------- */

  mov     #0x0004, r2
  mov     #0x1234, r4
  jn      test_jn_fwrd1
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r4
  test_jn_bckwrd:
  mov     #0x9abc, r6
  jn      test_jn_fwrd2
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r5
  mov     #0x0000, r5
  mov     #0x0000, r5
  mov     #0x0000, r6
  mov     #0x0000, r6
  mov     #0x0000, r6
  test_jn_fwrd1:
  mov     #0x5678, r5
  jn      test_jn_bckwrd
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r5
  mov     #0x0000, r5
  mov     #0x0000, r5

  test_jn_fwrd2:

  mov     #0x1000, r15

    /* -------------- TEST JUMP FOR ALL FLAG CONFIGURATIONS ------------ */

  mov     #0x0000, r2             ;# {V,N,Z,C} = 4'b0000
  mov     #0x1234, r4
  jn      test_jn_0
  mov     #0x0000, r4
  test_jn_0:
  mov     #0x2000, r15

  mov     #0x0001, r2             ;# {V,N,Z,C} = 4'b0001
  mov     #0x1234, r4
  jn      test_jn_1
  mov     #0x0000, r4
  test_jn_1:
  mov     #0x2001, r15

  mov     #0x0002, r2             ;# {V,N,Z,C} = 4'b0010
  mov     #0x1234, r4
  jn      test_jn_2
  mov     #0x0000, r4
  test_jn_2:
  mov     #0x2002, r15

  mov     #0x0003, r2             ;# {V,N,Z,C} = 4'b0011
  mov     #0x1234, r4
  jn      test_jn_3
  mov     #0x0000, r4
  test_jn_3:
  mov     #0x2003, r15

  mov     #0x0004, r2             ;# {V,N,Z,C} = 4'b0100
  mov     #0x1234, r4
  jn      test_jn_4
  mov     #0x0000, r4
  test_jn_4:
  mov     #0x2004, r15

  mov     #0x0005, r2             ;# {V,N,Z,C} = 4'b0101
  mov     #0x1234, r4
  jn      test_jn_5
  mov     #0x0000, r4
  test_jn_5:
  mov     #0x2005, r15

  mov     #0x0006, r2             ;# {V,N,Z,C} = 4'b0110
  mov     #0x1234, r4
  jn      test_jn_6
  mov     #0x0000, r4
  test_jn_6:
  mov     #0x2006, r15

  mov     #0x0007, r2             ;# {V,N,Z,C} = 4'b0111
  mov     #0x1234, r4
  jn      test_jn_7
  mov     #0x0000, r4
  test_jn_7:
  mov     #0x2007, r15

  mov     #0x0100, r2             ;# {V,N,Z,C} = 4'b1000
  mov     #0x1234, r4
  jn      test_jn_8
  mov     #0x0000, r4
  test_jn_8:
  mov     #0x2008, r15

  mov     #0x0101, r2             ;# {V,N,Z,C} = 4'b1001
  mov     #0x1234, r4
  jn      test_jn_9
  mov     #0x0000, r4
  test_jn_9:
  mov     #0x2009, r15

  mov     #0x0102, r2             ;# {V,N,Z,C} = 4'b1010
  mov     #0x1234, r4
  jn      test_jn_A
  mov     #0x0000, r4
  test_jn_A:
  mov     #0x200A, r15

  mov     #0x0103, r2             ;# {V,N,Z,C} = 4'b1011
  mov     #0x1234, r4
  jn      test_jn_B
  mov     #0x0000, r4
  test_jn_B:
  mov     #0x200B, r15

  mov     #0x0104, r2             ;# {V,N,Z,C} = 4'b1100
  mov     #0x1234, r4
  jn      test_jn_C
  mov     #0x0000, r4
  test_jn_C:
  mov     #0x200C, r15

  mov     #0x0105, r2             ;# {V,N,Z,C} = 4'b1101
  mov     #0x1234, r4
  jn      test_jn_D
  mov     #0x0000, r4
  test_jn_D:
  mov     #0x200D, r15

  mov     #0x0106, r2             ;# {V,N,Z,C} = 4'b1110
  mov     #0x1234, r4
  jn      test_jn_E
  mov     #0x0000, r4
  test_jn_E:
  mov     #0x200E, r15

  mov     #0x0107, r2             ;# {V,N,Z,C} = 4'b1111
  mov     #0x1234, r4
  jn      test_jn_F
  mov     #0x0000, r4
  test_jn_F:
  mov     #0x200F, r15


  /* -------------- TEST JUMP FORWARD AND BACKWARD ------------------- */

  mov     #0x0000, r2
  mov     #0x1234, r4
  jnc     test_jnc_fwrd1
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r4
  test_jnc_bckwrd:
  mov     #0x9abc, r6
  jnc     test_jnc_fwrd2
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r5
  mov     #0x0000, r5
  mov     #0x0000, r5
  mov     #0x0000, r6
  mov     #0x0000, r6
  mov     #0x0000, r6
  test_jnc_fwrd1:
  mov     #0x5678, r5
  jnc     test_jnc_bckwrd
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r5
  mov     #0x0000, r5
  mov     #0x0000, r5

  test_jnc_fwrd2:

  mov     #0x1000, r15

  /* -------------- TEST JUMP FOR ALL FLAG CONFIGURATIONS ------------ */

  mov     #0x0000, r2             ;# {V,N,Z,C} = 4'b0000
  mov     #0x1234, r4
  jnc     test_jnc_0
  mov     #0x0000, r4
  test_jnc_0:
  mov     #0x2000, r15

  mov     #0x0001, r2             ;# {V,N,Z,C} = 4'b0001
  mov     #0x1234, r4
  jnc     test_jnc_1
  mov     #0x0000, r4
  test_jnc_1:
  mov     #0x2001, r15

  mov     #0x0002, r2             ;# {V,N,Z,C} = 4'b0010
  mov     #0x1234, r4
  jnc     test_jnc_2
  mov     #0x0000, r4
  test_jnc_2:
  mov     #0x2002, r15

  mov     #0x0003, r2             ;# {V,N,Z,C} = 4'b0011
  mov     #0x1234, r4
  jnc     test_jnc_3
  mov     #0x0000, r4
  test_jnc_3:
  mov     #0x2003, r15

  mov     #0x0004, r2             ;# {V,N,Z,C} = 4'b0100
  mov     #0x1234, r4
  jnc     test_jnc_4
  mov     #0x0000, r4
  test_jnc_4:
  mov     #0x2004, r15

  mov     #0x0005, r2             ;# {V,N,Z,C} = 4'b0101
  mov     #0x1234, r4
  jnc     test_jnc_5
  mov     #0x0000, r4
  test_jnc_5:
  mov     #0x2005, r15

  mov     #0x0006, r2             ;# {V,N,Z,C} = 4'b0110
  mov     #0x1234, r4
  jnc     test_jnc_6
  mov     #0x0000, r4
  test_jnc_6:
  mov     #0x2006, r15

  mov     #0x0007, r2             ;# {V,N,Z,C} = 4'b0111
  mov     #0x1234, r4
  jnc     test_jnc_7
  mov     #0x0000, r4
  test_jnc_7:
  mov     #0x2007, r15

  mov     #0x0100, r2             ;# {V,N,Z,C} = 4'b1000
  mov     #0x1234, r4
  jnc     test_jnc_8
  mov     #0x0000, r4
  test_jnc_8:
  mov     #0x2008, r15

  mov     #0x0101, r2             ;# {V,N,Z,C} = 4'b1001
  mov     #0x1234, r4
  jnc     test_jnc_9
  mov     #0x0000, r4
  test_jnc_9:
  mov     #0x2009, r15

  mov     #0x0102, r2             ;# {V,N,Z,C} = 4'b1010
  mov     #0x1234, r4
  jnc     test_jnc_A
  mov     #0x0000, r4
  test_jnc_A:
  mov     #0x200A, r15

  mov     #0x0103, r2             ;# {V,N,Z,C} = 4'b1011
  mov     #0x1234, r4
  jnc     test_jnc_B
  mov     #0x0000, r4
  test_jnc_B:
  mov     #0x200B, r15

  mov     #0x0104, r2             ;# {V,N,Z,C} = 4'b1100
  mov     #0x1234, r4
  jnc     test_jnc_C
  mov     #0x0000, r4
  test_jnc_C:
  mov     #0x200C, r15

  mov     #0x0105, r2             ;# {V,N,Z,C} = 4'b1101
  mov     #0x1234, r4
  jnc     test_jnc_D
  mov     #0x0000, r4
  test_jnc_D:
  mov     #0x200D, r15

  mov     #0x0106, r2             ;# {V,N,Z,C} = 4'b1110
  mov     #0x1234, r4
  jnc     test_jnc_E
  mov     #0x0000, r4
  test_jnc_E:
  mov     #0x200E, r15

  mov     #0x0107, r2             ;# {V,N,Z,C} = 4'b1111
  mov     #0x1234, r4
  jnc     test_jnc_F
  mov     #0x0000, r4
  test_jnc_F:
  mov     #0x200F, r15


  /* -------------- TEST JUMP FORWARD AND BACKWARD ------------------- */

  mov     #0x0000, r2
  mov     #0x1234, r4
  jne     test_jne_fwrd1
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r4
  test_jne_bckwrd:
  mov     #0x9abc, r6
  jne     test_jne_fwrd2
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r5
  mov     #0x0000, r5
  mov     #0x0000, r5
  mov     #0x0000, r6
  mov     #0x0000, r6
  mov     #0x0000, r6
  test_jne_fwrd1:
  mov     #0x5678, r5
  jne     test_jne_bckwrd
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r4
  mov     #0x0000, r5
  mov     #0x0000, r5
  mov     #0x0000, r5

  test_jne_fwrd2:

  mov     #0x1000, r15

  /* -------------- TEST JUMP FOR ALL FLAG CONFIGURATIONS ------------ */

  mov     #0x0000, r2             ;# {V,N,Z,C} = 4'b0000
  mov     #0x1234, r4
  jne     test_jne_0
  mov     #0x0000, r4
  test_jne_0:
  mov     #0x2000, r15

  mov     #0x0001, r2             ;# {V,N,Z,C} = 4'b0001
  mov     #0x1234, r4
  jne     test_jne_1
  mov     #0x0000, r4
  test_jne_1:
  mov     #0x2001, r15

  mov     #0x0002, r2             ;# {V,N,Z,C} = 4'b0010
  mov     #0x1234, r4
  jne     test_jne_2
  mov     #0x0000, r4
  test_jne_2:
  mov     #0x2002, r15

  mov     #0x0003, r2             ;# {V,N,Z,C} = 4'b0011
  mov     #0x1234, r4
  jne     test_jne_3
  mov     #0x0000, r4
  test_jne_3:
  mov     #0x2003, r15

  mov     #0x0004, r2             ;# {V,N,Z,C} = 4'b0100
  mov     #0x1234, r4
  jne     test_jne_4
  mov     #0x0000, r4
  test_jne_4:
  mov     #0x2004, r15

  mov     #0x0005, r2             ;# {V,N,Z,C} = 4'b0101
  mov     #0x1234, r4
  jne     test_jne_5
  mov     #0x0000, r4
  test_jne_5:
  mov     #0x2005, r15

  mov     #0x0006, r2             ;# {V,N,Z,C} = 4'b0110
  mov     #0x1234, r4
  jne     test_jne_6
  mov     #0x0000, r4
  test_jne_6:
  mov     #0x2006, r15

  mov     #0x0007, r2             ;# {V,N,Z,C} = 4'b0111
  mov     #0x1234, r4
  jne     test_jne_7
  mov     #0x0000, r4
  test_jne_7:
  mov     #0x2007, r15

  mov     #0x0100, r2             ;# {V,N,Z,C} = 4'b1000
  mov     #0x1234, r4
  jne     test_jne_8
  mov     #0x0000, r4
  test_jne_8:
  mov     #0x2008, r15

  mov     #0x0101, r2             ;# {V,N,Z,C} = 4'b1001
  mov     #0x1234, r4
  jne     test_jne_9
  mov     #0x0000, r4
  test_jne_9:
  mov     #0x2009, r15

  mov     #0x0102, r2             ;# {V,N,Z,C} = 4'b1010
  mov     #0x1234, r4
  jne     test_jne_A
  mov     #0x0000, r4
  test_jne_A:
  mov     #0x200A, r15

  mov     #0x0103, r2             ;# {V,N,Z,C} = 4'b1011
  mov     #0x1234, r4
  jne     test_jne_B
  mov     #0x0000, r4
  test_jne_B:
  mov     #0x200B, r15

  mov     #0x0104, r2             ;# {V,N,Z,C} = 4'b1100
  mov     #0x1234, r4
  jne     test_jne_C
  mov     #0x0000, r4
  test_jne_C:
  mov     #0x200C, r15

  mov     #0x0105, r2             ;# {V,N,Z,C} = 4'b1101
  mov     #0x1234, r4
  jne     test_jne_D
  mov     #0x0000, r4
  test_jne_D:
  mov     #0x200D, r15

  mov     #0x0106, r2             ;# {V,N,Z,C} = 4'b1110
  mov     #0x1234, r4
  jne     test_jne_E
  mov     #0x0000, r4
  test_jne_E:
  mov     #0x200E, r15

  mov     #0x0107, r2             ;# {V,N,Z,C} = 4'b1111
  mov     #0x1234, r4
  jne     test_jne_F
  mov     #0x0000, r4
  test_jne_F:
  mov     #0x200F, r15

  /* ---------------------------------------------------------------*/
  /* ---------END OF TEST ALL JUMPS (EXTENDED JUMP TEST)------------*/
  /* ---------------------------------------------------------------*/

        /*-----------------------------------------------------------------------------*/
        /*-----------------------------------------------------------------------------*/
        /*                      TEST FUNCTION CALL CIRCUITS                            */
        /*-----------------------------------------------------------------------------*/
        /*-----------------------------------------------------------------------------*/
        MOV.W #0x2000, R1
        MOV.W #0x2002, R6             /* POINTER TO MEM LOCATION FOR STORE OPERATION -> MAX 2A00 */
        CALL #function1

        nop
        br #0xffff                         /* THIS BRANCH WILL STOP THE SIMULATION */


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 1                                               */
/*-----------------------------------------------------------------------------*/
.org 0x2136
function1:
       ADD.W #4, R6
       MOV.W #0x1010, 0(R6)
       CALL #function2
       ADD.W #4, R6
       MOV.W #0x0101, 0(R6)
       RET
       MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 2                                               */
/*-----------------------------------------------------------------------------*/
.org 0x2332
function2:
       ADD.W #4, R6
       MOV.W #0x1010, 0(R6)
       CALL #function3
       ADD.W #4, R6
       MOV.W #0x0101, 0(R6)
       RET
       MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 3                                               */
/*-----------------------------------------------------------------------------*/
.org 0x252e
function3:
         ADD.W #4, R6
         MOV.W #0x1010, 0(R6)
         CALL #function4
         ADD.W #4, R6
         MOV.W #0x0101, 0(R6)
         RET
         MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 4                                               */
/*-----------------------------------------------------------------------------*/
.org 0x272a
function4:
         ADD.W #4, R6
         MOV.W #0x1010, 0(R6)
         CALL #function5
         ADD.W #4, R6
         MOV.W #0x0101, 0(R6)
         RET
         MOV.W #0x0011, 0(R6)

/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 5                                               */
/*-----------------------------------------------------------------------------*/
.org 0x2926
function5:
         ADD.W #4, R6
         MOV.W #0x1010, 0(R6)
         MOV.W #function6, R5
         CALL R5
         ADD.W #4, R6
         MOV.W #0x0101, 0(R6)
         RET
         MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 6                                               */
/*-----------------------------------------------------------------------------*/
.org 0x2b22
function6:
         ADD.W #4, R6
         MOV.W #0x1010, 0(R6)
         MOV.W #function7, R5
         CALL R5
         ADD.W #4, R6
         MOV.W #0x0101, 0(R6)
         RET
         MOV.W #0x0011, 0(R6)

/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 7                                               */
/*-----------------------------------------------------------------------------*/
.org 0x2d1e
function7:
         ADD.W #4, R6
         MOV.W #0x1010, 0(R6)
         MOV.W #function8, R5
         CALL R5
         ADD.W #4, R6
         MOV.W #0x0101, 0(R6)
         RET
         MOV.W #0x0011, 0(R6)

/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 8                                               */
/*-----------------------------------------------------------------------------*/
.org 0x2f1a
function8:
         ADD.W #4, R6
         MOV.W #0x1010, 0(R6)
         MOV.W #function9, R5
         CALL R5
         ADD.W #4, R6
         MOV.W #0x0101, 0(R6)
         RET
         MOV.W #0x0011, 0(R6)

/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 9                                               */
/*-----------------------------------------------------------------------------*/
.org 0x3116
function9:
         ADD.W #4, R6
         MOV.W #0x1010, 0(R6)
         MOV.W #function10, @R6
         CALL @R6
         ADD.W #4, R6
         MOV.W #0x0101, 0(R6)
         RET
         MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 10                                              */
/*-----------------------------------------------------------------------------*/
.org 0x3312
function10:
         ADD.W #4, R6
         MOV.W #0x1010, 0(R6)
         MOV.W #function11, @R6
         CALL @R6
         ADD.W #4, R6
         MOV.W #0x0101, 0(R6)
         RET
         MOV.W #0x0011, 0(R6)

/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 11                                              */
/*-----------------------------------------------------------------------------*/
.org 0x350e
function11:
         ADD.W #4, R6
         MOV.W #0x1010, 0(R6)
         MOV.W #function12, @R6
         CALL @R6+
         ADD.W #2, R6
         MOV.W #0x0101, 0(R6)
         RET
         MOV.W #0x0011, 0(R6)

/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 12                                              */
/*-----------------------------------------------------------------------------*/
.org 0x370a
function12:
        ADD.W #4, R6
        MOV.W #0x1010, 0(R6)
        MOV.W #function13, @R6
        CALL @R6+
        ADD.W #2, R6
        MOV.W #0x0101, 0(R6)
        RET
        MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 13                                              */
/*-----------------------------------------------------------------------------*/
.org 0x3906
function13:
        .set   EDE_21E,  DMEM_21E+PMEM_EDE_LENGTH
        mov  #function14, &DMEM_21E
        ADD.W #4, R6
        MOV.W #0x1010, 0(R6)
        CALL EDE_21E
        ADD.W #4, R6
        MOV.W #0x0101, 0(R6)
        RET
        MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 14                                              */
/*-----------------------------------------------------------------------------*/
.org 0x3b02
function14:
        .set   aEDE_220,  DMEM_220
        mov  #function15, &aEDE_220
        ADD.W #4, R6
        MOV.W #0x1010, 0(R6)
        CALL &aEDE_220
        ADD.W #4, R6
        MOV.W #0x0101, 0(R6)
        RET
        MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 15                                              */
/*-----------------------------------------------------------------------------*/
.org 0x3cfe
function15:
        ADD.W #4, R6
        MOV.W #0x1010, 0(R6)
        CALL #function16
        ADD.W #4, R6
        MOV.W #0x0101, 0(R6)
        RET
        MOV.W #0x0011, 0(R6)

/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 16                                              */
/*-----------------------------------------------------------------------------*/
.org 0x3efa
function16:
        ADD.W #4, R6
        MOV.W #0x1010, 0(R6)
        CALL #function17
        ADD.W #4, R6
        MOV.W #0x0101, 0(R6)
        RET
        MOV.W #0x0011, 0(R6)

/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 17                                              */
/*-----------------------------------------------------------------------------*/
.org 0x40f6
function17:
        ADD.W #4, R6
        MOV.W #0x1010, 0(R6)
        CALL #function18
        ADD.W #4, R6
        MOV.W #0x0101, 0(R6)
        RET
        MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 18                                              */
/*-----------------------------------------------------------------------------*/
.org 0x42f2
function18:
        ADD.W #4, R6
        MOV.W #0x1010, 0(R6)
        CALL #function19
        ADD.W #4, R6
        MOV.W #0x0101, 0(R6)
        RET
        MOV.W #0x0011, 0(R6)

/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 19                                              */
/*-----------------------------------------------------------------------------*/
.org 0x44ee
function19:
        ADD.W #4, R6
        MOV.W #0x1010, 0(R6)
        CALL #function20
        ADD.W #4, R6
        MOV.W #0x0101, 0(R6)
        RET
        MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*                    FUNCTION 20                                              */
/*-----------------------------------------------------------------------------*/
.org 0x46ea
function20:
        ADD.W #4, R6
        MOV.W #0x1010, 0(R6)
        ADD.W #4, R6
        MOV.W #0x0101, 0(R6)
        RET
        MOV.W #0x0011, 0(R6)


/*-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------*/


        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
